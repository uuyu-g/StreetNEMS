{"id":"../node_modules/nem-sdk/build/model/transactions/multisigWrapper.js","dependencies":[{"name":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/multisigWrapper.js.map","includedInParent":true,"mtime":1555063524264},{"name":"/Users/yugo/Dropbox/Programing/NEM/streetnems/package.json","includedInParent":true,"mtime":1555063526179},{"name":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/package.json","includedInParent":true,"mtime":1555063516168},{"name":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/.babelrc","includedInParent":true,"mtime":1530213456000},{"name":"../network","loc":{"line":7,"column":23},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/multisigWrapper.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/network.js"},{"name":"../../utils/helpers","loc":{"line":11,"column":23},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/multisigWrapper.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/utils/helpers.js"},{"name":"../transactionTypes","loc":{"line":15,"column":32},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/multisigWrapper.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactionTypes.js"},{"name":"../fees","loc":{"line":19,"column":20},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/multisigWrapper.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/fees.js"},{"name":"../objects","loc":{"line":23,"column":23},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/multisigWrapper.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/objects.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _network = require('../network');\n\nvar _network2 = _interopRequireDefault(_network);\n\nvar _helpers = require('../../utils/helpers');\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _transactionTypes = require('../transactionTypes');\n\nvar _transactionTypes2 = _interopRequireDefault(_transactionTypes);\n\nvar _fees = require('../fees');\n\nvar _fees2 = _interopRequireDefault(_fees);\n\nvar _objects = require('../objects');\n\nvar _objects2 = _interopRequireDefault(_objects);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Wrap a transaction in a multisignature transaction\n *\n * @param {string} senderPublicKey - The sender public key\n * @param {object} innerEntity - The transaction entity to wrap\n * @param {number} due - The transaction deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - A [MultisigTransaction]{@link http://bob.nem.ninja/docs/#multisigTransaction} object\n */\nvar multisigWrapper = function multisigWrapper(senderPublicKey, innerEntity, due, network) {\n  var timeStamp = _helpers2.default.createNEMTimeStamp();\n  var version = _network2.default.getVersion(1, network);\n  var data = _objects2.default.create(\"commonTransactionPart\")(_transactionTypes2.default.multisigTransaction, senderPublicKey, timeStamp, due, version, network);\n  var custom = {\n    'fee': _fees2.default.multisigTransaction,\n    'otherTrans': innerEntity\n  };\n  var entity = _helpers2.default.extendObj(data, custom);\n  return entity;\n};\n\nexports.default = multisigWrapper;\n"},"sourceMaps":{"js":{"version":3,"sources":["../../../src/model/transactions/multisigWrapper.js"],"names":["multisigWrapper","senderPublicKey","innerEntity","due","network","timeStamp","Helpers","createNEMTimeStamp","version","Network","getVersion","data","Objects","create","TransactionTypes","multisigTransaction","custom","Fees","entity","extendObj"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;AAUA,IAAIA,kBAAkB,SAAlBA,eAAkB,CAASC,eAAT,EAA0BC,WAA1B,EAAuCC,GAAvC,EAA4CC,OAA5C,EAAqD;AAC1E,MAAIC,YAAYC,kBAAQC,kBAAR,EAAhB;AACG,MAAIC,UAAUC,kBAAQC,UAAR,CAAmB,CAAnB,EAAsBN,OAAtB,CAAd;AACA,MAAIO,OAAOC,kBAAQC,MAAR,CAAe,uBAAf,EAAwCC,2BAAiBC,mBAAzD,EAA8Ed,eAA9E,EAA+FI,SAA/F,EAA0GF,GAA1G,EAA+GK,OAA/G,EAAwHJ,OAAxH,CAAX;AACA,MAAIY,SAAS;AACT,WAAOC,eAAKF,mBADH;AAET,kBAAcb;AAFL,GAAb;AAIA,MAAIgB,SAASZ,kBAAQa,SAAR,CAAkBR,IAAlB,EAAwBK,MAAxB,CAAb;AACA,SAAOE,MAAP;AACH,CAVD;;kBAYelB,e","file":"multisigWrapper.js","sourcesContent":["import Network from '../network';\nimport Helpers from '../../utils/helpers';\nimport TransactionTypes from '../transactionTypes';\nimport Fees from '../fees';\nimport Objects from '../objects';\n\n/**\n * Wrap a transaction in a multisignature transaction\n *\n * @param {string} senderPublicKey - The sender public key\n * @param {object} innerEntity - The transaction entity to wrap\n * @param {number} due - The transaction deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - A [MultisigTransaction]{@link http://bob.nem.ninja/docs/#multisigTransaction} object\n */\nlet multisigWrapper = function(senderPublicKey, innerEntity, due, network) {\n\tlet timeStamp = Helpers.createNEMTimeStamp();\n    let version = Network.getVersion(1, network);\n    let data = Objects.create(\"commonTransactionPart\")(TransactionTypes.multisigTransaction, senderPublicKey, timeStamp, due, version, network);\n    let custom = {\n        'fee': Fees.multisigTransaction,\n        'otherTrans': innerEntity\n    };\n    let entity = Helpers.extendObj(data, custom);\n    return entity;\n}\n\nexport default multisigWrapper;"]}},"error":null,"hash":"5f70f24cd371cfccaf2faae3a7693082","cacheData":{"env":{}}}