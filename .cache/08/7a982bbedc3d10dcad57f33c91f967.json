{"id":"../node_modules/nem-sdk/build/model/transactions/importanceTransferTransaction.js","dependencies":[{"name":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/importanceTransferTransaction.js.map","includedInParent":true,"mtime":1555063524122},{"name":"/Users/yugo/Dropbox/Programing/NEM/streetnems/package.json","includedInParent":true,"mtime":1555063526179},{"name":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/package.json","includedInParent":true,"mtime":1555063516168},{"name":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/.babelrc","includedInParent":true,"mtime":1530213456000},{"name":"../network","loc":{"line":3,"column":23},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/importanceTransferTransaction.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/network.js"},{"name":"../../utils/helpers","loc":{"line":7,"column":23},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/importanceTransferTransaction.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/utils/helpers.js"},{"name":"../transactionTypes","loc":{"line":11,"column":32},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/importanceTransferTransaction.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactionTypes.js"},{"name":"../fees","loc":{"line":15,"column":20},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/importanceTransferTransaction.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/fees.js"},{"name":"../../crypto/keyPair","loc":{"line":19,"column":23},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/importanceTransferTransaction.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/crypto/keyPair.js"},{"name":"../objects","loc":{"line":23,"column":23},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/importanceTransferTransaction.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/objects.js"},{"name":"./multisigWrapper","loc":{"line":27,"column":31},"parent":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/importanceTransferTransaction.js","resolved":"/Users/yugo/Dropbox/Programing/NEM/streetnems/node_modules/nem-sdk/build/model/transactions/multisigWrapper.js"}],"generated":{"js":"'use strict';\n\nvar _network = require('../network');\n\nvar _network2 = _interopRequireDefault(_network);\n\nvar _helpers = require('../../utils/helpers');\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _transactionTypes = require('../transactionTypes');\n\nvar _transactionTypes2 = _interopRequireDefault(_transactionTypes);\n\nvar _fees = require('../fees');\n\nvar _fees2 = _interopRequireDefault(_fees);\n\nvar _keyPair = require('../../crypto/keyPair');\n\nvar _keyPair2 = _interopRequireDefault(_keyPair);\n\nvar _objects = require('../objects');\n\nvar _objects2 = _interopRequireDefault(_objects);\n\nvar _multisigWrapper = require('./multisigWrapper');\n\nvar _multisigWrapper2 = _interopRequireDefault(_multisigWrapper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Prepare an importance transfer transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - An un-prepared importanceTransferTransaction object\n * @param {number} network - A network id\n *\n * @return {object} - An [ImportanceTransferTransaction]{@link https://bob.nem.ninja/docs/#importanceTransferTransaction} object ready for serialization\n */\nvar prepare = function prepare(common, tx, network) {\n    if (!common || !tx || !network) throw new Error('Missing parameter !');\n    var kp = _keyPair2.default.create(_helpers2.default.fixPrivateKey(common.privateKey));\n    var actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    var due = network === _network2.default.data.testnet.id ? 60 : 24 * 60;\n    var entity = _construct(actualSender, tx.remoteAccount, tx.mode, due, network);\n    if (tx.isMultisig) {\n        entity = (0, _multisigWrapper2.default)(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n};\n\n/***\n * Create an importance transfer transaction object\n *\n * @param {string} senderPublicKey - The sender account public key\n * @param {string} remotePublicKey - The remote account public key\n * @param {number} mode - 1 for activating, 2 for deactivating\n * @param {number} due - The deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - An [ImportanceTransferTransaction]{@link https://bob.nem.ninja/docs/#importanceTransferTransaction} object\n */\nvar _construct = function _construct(senderPublicKey, remotePublicKey, mode, due, network) {\n    var timeStamp = _helpers2.default.createNEMTimeStamp();\n    var version = _network2.default.getVersion(1, network);\n    var data = _objects2.default.create(\"commonTransactionPart\")(_transactionTypes2.default.importanceTransfer, senderPublicKey, timeStamp, due, version);\n    var fee = _fees2.default.importanceTransferTransaction;\n    var custom = {\n        'remoteAccount': remotePublicKey,\n        'mode': mode,\n        'fee': fee\n    };\n    var entity = _helpers2.default.extendObj(data, custom);\n    return entity;\n};\n\nmodule.exports = {\n    prepare: prepare\n};\n"},"sourceMaps":{"js":{"version":3,"sources":["../../../src/model/transactions/importanceTransferTransaction.js"],"names":["prepare","common","tx","network","Error","kp","KeyPair","create","Helpers","fixPrivateKey","privateKey","actualSender","isMultisig","multisigAccount","publicKey","toString","due","Network","data","testnet","id","entity","_construct","remoteAccount","mode","senderPublicKey","remotePublicKey","timeStamp","createNEMTimeStamp","version","getVersion","Objects","TransactionTypes","importanceTransfer","fee","Fees","importanceTransferTransaction","custom","extendObj","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAIA,UAAU,SAAVA,OAAU,CAAUC,MAAV,EAAkBC,EAAlB,EAAsBC,OAAtB,EAA+B;AACzC,QAAI,CAACF,MAAD,IAAW,CAACC,EAAZ,IAAkB,CAACC,OAAvB,EAAgC,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AAChC,QAAIC,KAAKC,kBAAQC,MAAR,CAAeC,kBAAQC,aAAR,CAAsBR,OAAOS,UAA7B,CAAf,CAAT;AACA,QAAIC,eAAeT,GAAGU,UAAH,GAAgBV,GAAGW,eAAH,CAAmBC,SAAnC,GAA+CT,GAAGS,SAAH,CAAaC,QAAb,EAAlE;AACA,QAAIC,MAAMb,YAAYc,kBAAQC,IAAR,CAAaC,OAAb,CAAqBC,EAAjC,GAAsC,EAAtC,GAA2C,KAAK,EAA1D;AACA,QAAIC,SAASC,WAAWX,YAAX,EAAyBT,GAAGqB,aAA5B,EAA2CrB,GAAGsB,IAA9C,EAAoDR,GAApD,EAAyDb,OAAzD,CAAb;AACA,QAAID,GAAGU,UAAP,EAAmB;AACfS,iBAAS,+BAAgBhB,GAAGS,SAAH,CAAaC,QAAb,EAAhB,EAAyCM,MAAzC,EAAiDL,GAAjD,EAAsDb,OAAtD,CAAT;AACH;AACD,WAAOkB,MAAP;AACH,CAVD;;AAYA;;;;;;;;;;;AAWA,IAAIC,aAAa,SAAbA,UAAa,CAASG,eAAT,EAA0BC,eAA1B,EAA2CF,IAA3C,EAAiDR,GAAjD,EAAsDb,OAAtD,EAA+D;AAC5E,QAAIwB,YAAYnB,kBAAQoB,kBAAR,EAAhB;AACA,QAAIC,UAAUZ,kBAAQa,UAAR,CAAmB,CAAnB,EAAsB3B,OAAtB,CAAd;AACA,QAAIe,OAAOa,kBAAQxB,MAAR,CAAe,uBAAf,EAAwCyB,2BAAiBC,kBAAzD,EAA6ER,eAA7E,EAA8FE,SAA9F,EAAyGX,GAAzG,EAA8Ga,OAA9G,CAAX;AACA,QAAIK,MAAMC,eAAKC,6BAAf;AACA,QAAIC,SAAS;AACT,yBAAiBX,eADR;AAET,gBAAQF,IAFC;AAGT,eAAOU;AAHE,KAAb;AAKA,QAAIb,SAASb,kBAAQ8B,SAAR,CAAkBpB,IAAlB,EAAwBmB,MAAxB,CAAb;AACA,WAAOhB,MAAP;AACH,CAZD;;AAcAkB,OAAOC,OAAP,GAAiB;AACbxC;AADa,CAAjB","file":"importanceTransferTransaction.js","sourcesContent":["import Network from '../network';\nimport Helpers from '../../utils/helpers';\nimport TransactionTypes from '../transactionTypes';\nimport Fees from '../fees';\nimport KeyPair from '../../crypto/keyPair';\nimport Objects from '../objects';\nimport MultisigWrapper from './multisigWrapper';\n\n/**\n * Prepare an importance transfer transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - An un-prepared importanceTransferTransaction object\n * @param {number} network - A network id\n *\n * @return {object} - An [ImportanceTransferTransaction]{@link https://bob.nem.ninja/docs/#importanceTransferTransaction} object ready for serialization\n */\nlet prepare = function (common, tx, network) {\n    if (!common || !tx || !network) throw new Error('Missing parameter !');\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let entity = _construct(actualSender, tx.remoteAccount, tx.mode, due, network);\n    if (tx.isMultisig) {\n        entity = MultisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n/***\n * Create an importance transfer transaction object\n *\n * @param {string} senderPublicKey - The sender account public key\n * @param {string} remotePublicKey - The remote account public key\n * @param {number} mode - 1 for activating, 2 for deactivating\n * @param {number} due - The deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - An [ImportanceTransferTransaction]{@link https://bob.nem.ninja/docs/#importanceTransferTransaction} object\n */\nlet _construct = function(senderPublicKey, remotePublicKey, mode, due, network) {\n    let timeStamp = Helpers.createNEMTimeStamp();\n    let version = Network.getVersion(1, network);\n    let data = Objects.create(\"commonTransactionPart\")(TransactionTypes.importanceTransfer, senderPublicKey, timeStamp, due, version);\n    let fee = Fees.importanceTransferTransaction;\n    let custom = {\n        'remoteAccount': remotePublicKey,\n        'mode': mode,\n        'fee': fee\n    };\n    let entity = Helpers.extendObj(data, custom);\n    return entity;\n}\n\nmodule.exports = {\n    prepare\n}"]}},"error":null,"hash":"6c5952fc02632634931103430a5c34ac","cacheData":{"env":{}}}